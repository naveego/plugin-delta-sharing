# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import publisher_pb2 as publisher__pb2


class PublisherStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Configure = channel.unary_unary(
                '/pub.Publisher/Configure',
                request_serializer=publisher__pb2.ConfigureRequest.SerializeToString,
                response_deserializer=publisher__pb2.ConfigureResponse.FromString,
                )
        self.Connect = channel.unary_unary(
                '/pub.Publisher/Connect',
                request_serializer=publisher__pb2.ConnectRequest.SerializeToString,
                response_deserializer=publisher__pb2.ConnectResponse.FromString,
                )
        self.ConnectSession = channel.unary_stream(
                '/pub.Publisher/ConnectSession',
                request_serializer=publisher__pb2.ConnectRequest.SerializeToString,
                response_deserializer=publisher__pb2.ConnectResponse.FromString,
                )
        self.DiscoverShapes = channel.unary_unary(
                '/pub.Publisher/DiscoverShapes',
                request_serializer=publisher__pb2.DiscoverSchemasRequest.SerializeToString,
                response_deserializer=publisher__pb2.DiscoverSchemasResponse.FromString,
                )
        self.DiscoverSchemas = channel.unary_unary(
                '/pub.Publisher/DiscoverSchemas',
                request_serializer=publisher__pb2.DiscoverSchemasRequest.SerializeToString,
                response_deserializer=publisher__pb2.DiscoverSchemasResponse.FromString,
                )
        self.DiscoverSchemasStream = channel.unary_stream(
                '/pub.Publisher/DiscoverSchemasStream',
                request_serializer=publisher__pb2.DiscoverSchemasRequest.SerializeToString,
                response_deserializer=publisher__pb2.Schema.FromString,
                )
        self.PublishStream = channel.unary_stream(
                '/pub.Publisher/PublishStream',
                request_serializer=publisher__pb2.ReadRequest.SerializeToString,
                response_deserializer=publisher__pb2.Record.FromString,
                )
        self.ReadStream = channel.unary_stream(
                '/pub.Publisher/ReadStream',
                request_serializer=publisher__pb2.ReadRequest.SerializeToString,
                response_deserializer=publisher__pb2.Record.FromString,
                )
        self.Disconnect = channel.unary_unary(
                '/pub.Publisher/Disconnect',
                request_serializer=publisher__pb2.DisconnectRequest.SerializeToString,
                response_deserializer=publisher__pb2.DisconnectResponse.FromString,
                )
        self.ConfigureConnection = channel.unary_unary(
                '/pub.Publisher/ConfigureConnection',
                request_serializer=publisher__pb2.ConfigureConnectionRequest.SerializeToString,
                response_deserializer=publisher__pb2.ConfigureConnectionResponse.FromString,
                )
        self.ConfigureQuery = channel.unary_unary(
                '/pub.Publisher/ConfigureQuery',
                request_serializer=publisher__pb2.ConfigureQueryRequest.SerializeToString,
                response_deserializer=publisher__pb2.ConfigureQueryResponse.FromString,
                )
        self.ConfigureRealTime = channel.unary_unary(
                '/pub.Publisher/ConfigureRealTime',
                request_serializer=publisher__pb2.ConfigureRealTimeRequest.SerializeToString,
                response_deserializer=publisher__pb2.ConfigureRealTimeResponse.FromString,
                )
        self.BeginOAuthFlow = channel.unary_unary(
                '/pub.Publisher/BeginOAuthFlow',
                request_serializer=publisher__pb2.BeginOAuthFlowRequest.SerializeToString,
                response_deserializer=publisher__pb2.BeginOAuthFlowResponse.FromString,
                )
        self.CompleteOAuthFlow = channel.unary_unary(
                '/pub.Publisher/CompleteOAuthFlow',
                request_serializer=publisher__pb2.CompleteOAuthFlowRequest.SerializeToString,
                response_deserializer=publisher__pb2.CompleteOAuthFlowResponse.FromString,
                )
        self.ConfigureWrite = channel.unary_unary(
                '/pub.Publisher/ConfigureWrite',
                request_serializer=publisher__pb2.ConfigureWriteRequest.SerializeToString,
                response_deserializer=publisher__pb2.ConfigureWriteResponse.FromString,
                )
        self.ConfigureReplication = channel.unary_unary(
                '/pub.Publisher/ConfigureReplication',
                request_serializer=publisher__pb2.ConfigureReplicationRequest.SerializeToString,
                response_deserializer=publisher__pb2.ConfigureReplicationResponse.FromString,
                )
        self.PrepareWrite = channel.unary_unary(
                '/pub.Publisher/PrepareWrite',
                request_serializer=publisher__pb2.PrepareWriteRequest.SerializeToString,
                response_deserializer=publisher__pb2.PrepareWriteResponse.FromString,
                )
        self.WriteStream = channel.stream_stream(
                '/pub.Publisher/WriteStream',
                request_serializer=publisher__pb2.Record.SerializeToString,
                response_deserializer=publisher__pb2.RecordAck.FromString,
                )
        self.DiscoverRelatedEntities = channel.unary_unary(
                '/pub.Publisher/DiscoverRelatedEntities',
                request_serializer=publisher__pb2.DiscoverRelatedEntitiesRequest.SerializeToString,
                response_deserializer=publisher__pb2.DiscoverRelatedEntitiesResponse.FromString,
                )


class PublisherServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Configure(self, request, context):
        """Configures the plugin.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Connect(self, request, context):
        """Instructs the plugin to connect to its data source.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConnectSession(self, request, context):
        """Instructs the plugin to connect to its data source
        and maintain a session where any change in the connection state
        or updates to OAuth information are streamed back to the host.
        The plugin should maintain this connection until Disconnect is called.
        This must be implemented if the plugin manifest has `canUseOAuth` set to
        true.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DiscoverShapes(self, request, context):
        """DiscoverShapes requests a listing of schemas this publisher can provide
        records for.
        
        Deprecated: Deprecated in API version 2. Implement DiscoverSchemasStream
        instead.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DiscoverSchemas(self, request, context):
        """Requests a listing of schemas this publisher can provide records for.
        New plugins should implement DiscoverSchemaStream and stream discovered
        schemes to the caller.
        
        Deprecated: Deprecated in API version 2. Implement DiscoverSchemasStream
        instead.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DiscoverSchemasStream(self, request, context):
        """Requests a stream of schemas this publisher can provide records for.
        
        API Version: 3
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishStream(self, request, context):
        """PublishStream begins streaming records to the client from the plugin.
        Implement ReadStream instead.
        
        Deprecated: Deprecated in API Version 2. Implement ReadStream instead.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadStream(self, request, context):
        """ReadStream begins streaming records to the client from the plugin.
        API Version: 2
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Disconnect(self, request, context):
        """Tells the plugin to disconnect from its data source, stop any running
        publishes, and gracefully prepare to be shut down.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureConnection(self, request, context):
        """Configures a connection which can be used to connect to a data source.
        This must be implemented if the plugin manifest has
        `canConfigureConnection` set to true. This is an alternative to having a
        `configSchema` element in the manifest.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureQuery(self, request, context):
        """Configures a query which can be used to publish a schema.
        This must be implemented if the plugin manifest has `canConfigureQuery` set
        to true.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureRealTime(self, request, context):
        """Configures settings for real time publishing (change detection).
        This must be implemented if the plugin manifest has `canPublishRealTime`
        set to true.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BeginOAuthFlow(self, request, context):
        """Invoked to begin an OAuth flow. This must be implemented if the plugin
        manifest has `canUseOAuth` set to true.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompleteOAuthFlow(self, request, context):
        """Invoked to complete an OAuth flow. This must be implemented if the plugin
        manifest has `canUseOAuth` set to true.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureWrite(self, request, context):
        """Configures a write back which can be used to write back a schema to the
        source. This must be implemented if the plugin manifest has
        `canConfigureWrite` set to true.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureReplication(self, request, context):
        """Configures a replication write back, where the plugin is in control
        of the destination and can insert/update/delete at will.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PrepareWrite(self, request, context):
        """Invoked to begin a write back request
        This must be implemented if the manifest has `canWrite` set to true.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteStream(self, request_iterator, context):
        """Creates a stream of records to write back and opens a stream to receive
        acks for write backs This must be implemented if the manifest has
        `canWrite` set to true.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DiscoverRelatedEntities(self, request, context):
        """Requests a listing of all related entities.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PublisherServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Configure': grpc.unary_unary_rpc_method_handler(
                    servicer.Configure,
                    request_deserializer=publisher__pb2.ConfigureRequest.FromString,
                    response_serializer=publisher__pb2.ConfigureResponse.SerializeToString,
            ),
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=publisher__pb2.ConnectRequest.FromString,
                    response_serializer=publisher__pb2.ConnectResponse.SerializeToString,
            ),
            'ConnectSession': grpc.unary_stream_rpc_method_handler(
                    servicer.ConnectSession,
                    request_deserializer=publisher__pb2.ConnectRequest.FromString,
                    response_serializer=publisher__pb2.ConnectResponse.SerializeToString,
            ),
            'DiscoverShapes': grpc.unary_unary_rpc_method_handler(
                    servicer.DiscoverShapes,
                    request_deserializer=publisher__pb2.DiscoverSchemasRequest.FromString,
                    response_serializer=publisher__pb2.DiscoverSchemasResponse.SerializeToString,
            ),
            'DiscoverSchemas': grpc.unary_unary_rpc_method_handler(
                    servicer.DiscoverSchemas,
                    request_deserializer=publisher__pb2.DiscoverSchemasRequest.FromString,
                    response_serializer=publisher__pb2.DiscoverSchemasResponse.SerializeToString,
            ),
            'DiscoverSchemasStream': grpc.unary_stream_rpc_method_handler(
                    servicer.DiscoverSchemasStream,
                    request_deserializer=publisher__pb2.DiscoverSchemasRequest.FromString,
                    response_serializer=publisher__pb2.Schema.SerializeToString,
            ),
            'PublishStream': grpc.unary_stream_rpc_method_handler(
                    servicer.PublishStream,
                    request_deserializer=publisher__pb2.ReadRequest.FromString,
                    response_serializer=publisher__pb2.Record.SerializeToString,
            ),
            'ReadStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ReadStream,
                    request_deserializer=publisher__pb2.ReadRequest.FromString,
                    response_serializer=publisher__pb2.Record.SerializeToString,
            ),
            'Disconnect': grpc.unary_unary_rpc_method_handler(
                    servicer.Disconnect,
                    request_deserializer=publisher__pb2.DisconnectRequest.FromString,
                    response_serializer=publisher__pb2.DisconnectResponse.SerializeToString,
            ),
            'ConfigureConnection': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureConnection,
                    request_deserializer=publisher__pb2.ConfigureConnectionRequest.FromString,
                    response_serializer=publisher__pb2.ConfigureConnectionResponse.SerializeToString,
            ),
            'ConfigureQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureQuery,
                    request_deserializer=publisher__pb2.ConfigureQueryRequest.FromString,
                    response_serializer=publisher__pb2.ConfigureQueryResponse.SerializeToString,
            ),
            'ConfigureRealTime': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureRealTime,
                    request_deserializer=publisher__pb2.ConfigureRealTimeRequest.FromString,
                    response_serializer=publisher__pb2.ConfigureRealTimeResponse.SerializeToString,
            ),
            'BeginOAuthFlow': grpc.unary_unary_rpc_method_handler(
                    servicer.BeginOAuthFlow,
                    request_deserializer=publisher__pb2.BeginOAuthFlowRequest.FromString,
                    response_serializer=publisher__pb2.BeginOAuthFlowResponse.SerializeToString,
            ),
            'CompleteOAuthFlow': grpc.unary_unary_rpc_method_handler(
                    servicer.CompleteOAuthFlow,
                    request_deserializer=publisher__pb2.CompleteOAuthFlowRequest.FromString,
                    response_serializer=publisher__pb2.CompleteOAuthFlowResponse.SerializeToString,
            ),
            'ConfigureWrite': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureWrite,
                    request_deserializer=publisher__pb2.ConfigureWriteRequest.FromString,
                    response_serializer=publisher__pb2.ConfigureWriteResponse.SerializeToString,
            ),
            'ConfigureReplication': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureReplication,
                    request_deserializer=publisher__pb2.ConfigureReplicationRequest.FromString,
                    response_serializer=publisher__pb2.ConfigureReplicationResponse.SerializeToString,
            ),
            'PrepareWrite': grpc.unary_unary_rpc_method_handler(
                    servicer.PrepareWrite,
                    request_deserializer=publisher__pb2.PrepareWriteRequest.FromString,
                    response_serializer=publisher__pb2.PrepareWriteResponse.SerializeToString,
            ),
            'WriteStream': grpc.stream_stream_rpc_method_handler(
                    servicer.WriteStream,
                    request_deserializer=publisher__pb2.Record.FromString,
                    response_serializer=publisher__pb2.RecordAck.SerializeToString,
            ),
            'DiscoverRelatedEntities': grpc.unary_unary_rpc_method_handler(
                    servicer.DiscoverRelatedEntities,
                    request_deserializer=publisher__pb2.DiscoverRelatedEntitiesRequest.FromString,
                    response_serializer=publisher__pb2.DiscoverRelatedEntitiesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pub.Publisher', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Publisher(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Configure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pub.Publisher/Configure',
            publisher__pb2.ConfigureRequest.SerializeToString,
            publisher__pb2.ConfigureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pub.Publisher/Connect',
            publisher__pb2.ConnectRequest.SerializeToString,
            publisher__pb2.ConnectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConnectSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/pub.Publisher/ConnectSession',
            publisher__pb2.ConnectRequest.SerializeToString,
            publisher__pb2.ConnectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DiscoverShapes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pub.Publisher/DiscoverShapes',
            publisher__pb2.DiscoverSchemasRequest.SerializeToString,
            publisher__pb2.DiscoverSchemasResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DiscoverSchemas(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pub.Publisher/DiscoverSchemas',
            publisher__pb2.DiscoverSchemasRequest.SerializeToString,
            publisher__pb2.DiscoverSchemasResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DiscoverSchemasStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/pub.Publisher/DiscoverSchemasStream',
            publisher__pb2.DiscoverSchemasRequest.SerializeToString,
            publisher__pb2.Schema.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/pub.Publisher/PublishStream',
            publisher__pb2.ReadRequest.SerializeToString,
            publisher__pb2.Record.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/pub.Publisher/ReadStream',
            publisher__pb2.ReadRequest.SerializeToString,
            publisher__pb2.Record.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Disconnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pub.Publisher/Disconnect',
            publisher__pb2.DisconnectRequest.SerializeToString,
            publisher__pb2.DisconnectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureConnection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pub.Publisher/ConfigureConnection',
            publisher__pb2.ConfigureConnectionRequest.SerializeToString,
            publisher__pb2.ConfigureConnectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pub.Publisher/ConfigureQuery',
            publisher__pb2.ConfigureQueryRequest.SerializeToString,
            publisher__pb2.ConfigureQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureRealTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pub.Publisher/ConfigureRealTime',
            publisher__pb2.ConfigureRealTimeRequest.SerializeToString,
            publisher__pb2.ConfigureRealTimeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BeginOAuthFlow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pub.Publisher/BeginOAuthFlow',
            publisher__pb2.BeginOAuthFlowRequest.SerializeToString,
            publisher__pb2.BeginOAuthFlowResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CompleteOAuthFlow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pub.Publisher/CompleteOAuthFlow',
            publisher__pb2.CompleteOAuthFlowRequest.SerializeToString,
            publisher__pb2.CompleteOAuthFlowResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureWrite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pub.Publisher/ConfigureWrite',
            publisher__pb2.ConfigureWriteRequest.SerializeToString,
            publisher__pb2.ConfigureWriteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureReplication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pub.Publisher/ConfigureReplication',
            publisher__pb2.ConfigureReplicationRequest.SerializeToString,
            publisher__pb2.ConfigureReplicationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PrepareWrite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pub.Publisher/PrepareWrite',
            publisher__pb2.PrepareWriteRequest.SerializeToString,
            publisher__pb2.PrepareWriteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WriteStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/pub.Publisher/WriteStream',
            publisher__pb2.Record.SerializeToString,
            publisher__pb2.RecordAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DiscoverRelatedEntities(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pub.Publisher/DiscoverRelatedEntities',
            publisher__pb2.DiscoverRelatedEntitiesRequest.SerializeToString,
            publisher__pb2.DiscoverRelatedEntitiesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
